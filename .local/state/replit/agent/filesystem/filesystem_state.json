{"file_contents":{"README.md":{"content":"# Itvana","size_bytes":8},"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_wtf.csrf import CSRFProtect\nfrom flask_mail import Mail\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\ncsrf = CSRFProtect()\nmail = Mail()\n\n\n# create the app\napp = Flask(__name__)\napp.secret_key = os.urandom(32)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# configure the database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\", \"sqlite:///itvanaa.db\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# configure mail\napp.config['MAIL_SERVER'] = os.environ.get('MAIL_SERVER', 'smtp.gmail.com')\napp.config['MAIL_PORT'] = int(os.environ.get('MAIL_PORT', '587'))\napp.config['MAIL_USE_TLS'] = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']\napp.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')\napp.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')\napp.config['MAIL_DEFAULT_SENDER'] = os.environ.get('MAIL_DEFAULT_SENDER', 'noreply@itvanaa.com')\n\n# initialize extensions\ndb.init_app(app)\ncsrf.init_app(app)\nmail.init_app(app)\n\nwith app.app_context():\n    import models\n    db.create_all()\n\n# import routes\nfrom routes import *\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":1512},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, TextAreaField, EmailField, SelectField, SubmitField\nfrom wtforms.validators import DataRequired, Email, Length\n\nclass ContactForm(FlaskForm):\n    name = StringField('Full Name', validators=[DataRequired(), Length(min=2, max=100)])\n    email = EmailField('Email Address', validators=[DataRequired(), Email()])\n    company = StringField('Company Name', validators=[Length(max=100)])\n    phone = StringField('Phone Number', validators=[Length(max=20)])\n    service = SelectField('Service Interest', choices=[\n        ('', 'Select a service...'),\n        ('it-consulting', 'IT Consulting'),\n        ('staff-augmentation', 'Staff Augmentation'),\n        ('cloud-solutions', 'Cloud Solutions'),\n        ('cybersecurity', 'Cybersecurity'),\n        ('digital-transformation', 'Digital Transformation'),\n        ('managed-services', 'Managed IT Services')\n    ])\n    message = TextAreaField('Message', validators=[DataRequired(), Length(min=10, max=1000)])\n    submit = SubmitField('Send Message')\n\nclass NewsletterForm(FlaskForm):\n    email = EmailField('Email Address', validators=[DataRequired(), Email()])\n    submit = SubmitField('Subscribe')\n","size_bytes":1204},"main.py":{"content":"from app import app  # noqa: F401\n","size_bytes":34},"models.py":{"content":"from app import db\nfrom datetime import datetime\n\nclass ContactSubmission(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120), nullable=False)\n    company = db.Column(db.String(100))\n    phone = db.Column(db.String(20))\n    service = db.Column(db.String(50))\n    message = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<ContactSubmission {self.name} - {self.email}>'\n\nclass NewsletterSubscription(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    subscribed_at = db.Column(db.DateTime, default=datetime.utcnow)\n    is_active = db.Column(db.Boolean, default=True)\n    \n    def __repr__(self):\n        return f'<NewsletterSubscription {self.email}>'\n\nclass BlogPost(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    slug = db.Column(db.String(200), unique=True, nullable=False)\n    excerpt = db.Column(db.Text)\n    content = db.Column(db.Text)\n    image_url = db.Column(db.String(500))\n    published_at = db.Column(db.DateTime, default=datetime.utcnow)\n    is_published = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<BlogPost {self.title}>'\n","size_bytes":1581},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-mail>=0.10.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.41\",\n    \"werkzeug>=3.1.3\",\n    \"wtforms>=3.2.1\",\n    \"flask-wtf>=1.2.2\",\n]\n","size_bytes":401},"replit.md":{"content":"# ITVANAA - IT Consulting Website\n\n## Overview\n\nITVANAA is a professional IT consulting website built with Flask that showcases services, provides contact functionality, and includes a blog system. The application serves as a business website for an IT consulting company offering services like IT consulting, staff augmentation, cloud solutions, and cybersecurity.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Bootstrap 5 for responsive design\n- **CSS Framework**: Bootstrap 5 with custom CSS styling\n- **JavaScript**: Vanilla JavaScript for interactive features\n- **Static Assets**: CSS and JavaScript files served through Flask's static file handling\n\n### Backend Architecture\n- **Framework**: Flask web framework\n- **Database ORM**: SQLAlchemy with Flask-SQLAlchemy extension\n- **Form Handling**: Flask-WTF with WTForms for form validation\n- **Security**: CSRF protection enabled globally\n- **Email System**: Flask-Mail for sending emails\n\n## Key Components\n\n### Database Models\n- **ContactSubmission**: Stores contact form submissions with fields for name, email, company, phone, service interest, and message\n- **NewsletterSubscription**: Manages email subscriptions with active/inactive status\n- **BlogPost**: Content management for blog posts with title, slug, content, and publishing status\n\n### Forms\n- **ContactForm**: Handles business inquiries with validation for name, email, company, phone, service selection, and message\n- **NewsletterForm**: Simple email subscription form\n\n### Routes and Views\n- **Home Page** (`/`): Landing page with hero section and company overview\n- **Services** (`/services`): Service listing page\n- **Service Details** (`/services/<service_name>`): Individual service pages\n- **About** (`/about`): Company information page\n- **Blog** (`/blog`): Blog listing page\n- **Contact** (`/contact`): Contact form page\n- **Error Pages**: Custom 404 and 500 error pages\n\n## Data Flow\n\n1. **User Interaction**: Users navigate through the website and interact with forms\n2. **Form Submission**: Contact and newsletter forms are processed server-side\n3. **Database Storage**: Form submissions are stored in SQLite database\n4. **Email Notifications**: Contact form submissions trigger email notifications via Flask-Mail\n5. **Response**: Users receive confirmation messages and are redirected appropriately\n\n## External Dependencies\n\n### Python Packages\n- **Flask**: Web framework\n- **Flask-SQLAlchemy**: Database ORM\n- **Flask-WTF**: Form handling and CSRF protection\n- **Flask-Mail**: Email functionality\n- **WTForms**: Form validation\n- **Werkzeug**: WSGI utilities including ProxyFix middleware\n\n### Frontend Dependencies\n- **Bootstrap 5**: CSS framework via CDN\n- **Font Awesome**: Icons via CDN\n- **Custom CSS**: Additional styling in `static/css/style.css`\n- **Custom JavaScript**: Interactive features in `static/js/main.js`\n\n### External Services\n- **Email Provider**: Configurable SMTP server (defaults to Gmail)\n- **Image Assets**: Pixabay images for visual content\n\n## Deployment Strategy\n\n### Configuration\n- **Environment Variables**: Database URL, mail settings, and session secrets\n- **Database**: SQLite for development, configurable for production\n- **Session Management**: Secret key from environment variables\n- **Proxy Support**: ProxyFix middleware for reverse proxy deployments\n\n### Database Setup\n- **Auto-initialization**: Database tables are created automatically on app startup\n- **Connection Pooling**: Configured with pool recycling and pre-ping for reliability\n\n### Email Configuration\n- **SMTP Settings**: Configurable mail server, port, and authentication\n- **Default Sender**: Configurable default email address for notifications\n- **TLS Support**: Secure email transmission enabled\n\n### Security Features\n- **CSRF Protection**: Enabled globally for all forms\n- **Input Validation**: Server-side validation for all user inputs\n- **Error Handling**: Custom error pages for better user experience\n\nThe application is designed to be easily deployable with minimal configuration required, using environment variables for sensitive settings and providing sensible defaults for development.","size_bytes":4273},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, jsonify\nfrom flask_mail import Message\nfrom app import app, mail\nfrom forms import ContactForm, NewsletterForm\nimport logging\nimport os\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/services')\ndef services():\n    return render_template('services.html')\n\n@app.route('/services/<service_name>')\ndef service_detail(service_name):\n    services_data = {\n        'it-consulting': {\n            'title': 'IT Consulting',\n            'description': 'Strategic IT consulting to optimize your technology infrastructure and drive business growth.',\n            'features': [\n                'Technology Strategy Development',\n                'Infrastructure Assessment',\n                'Digital Transformation Planning',\n                'Technology Roadmap Creation',\n                'Cost Optimization Analysis',\n                'Risk Assessment & Mitigation'\n            ]\n        },\n        'staff-augmentation': {\n            'title': 'Staff Augmentation',\n            'description': 'Skilled IT professionals to augment your team and accelerate project delivery.',\n            'features': [\n                'Expert Developers & Engineers',\n                'Project-based Resources',\n                'Long-term Partnerships',\n                'Rapid Scaling Capabilities',\n                'Quality Assurance',\n                'Seamless Integration'\n            ]\n        },\n        'cloud-solutions': {\n            'title': 'Cloud Solutions',\n            'description': 'Comprehensive cloud services to modernize your infrastructure and enhance scalability.',\n            'features': [\n                'Cloud Migration Services',\n                'Multi-cloud Strategy',\n                'Cloud Architecture Design',\n                'DevOps Implementation',\n                'Cost Optimization',\n                'Security & Compliance'\n            ]\n        },\n        'cybersecurity': {\n            'title': 'Cybersecurity',\n            'description': 'Robust security solutions to protect your digital assets and maintain compliance.',\n            'features': [\n                'Security Assessment',\n                'Threat Detection & Response',\n                'Compliance Management',\n                'Security Training',\n                'Incident Response Planning',\n                'Continuous Monitoring'\n            ]\n        },\n        'digital-transformation': {\n            'title': 'Digital Transformation',\n            'description': 'End-to-end digital transformation services to modernize your business processes.',\n            'features': [\n                'Process Automation',\n                'Legacy System Modernization',\n                'Data Analytics & Insights',\n                'Customer Experience Enhancement',\n                'Mobile Solutions',\n                'Integration Services'\n            ]\n        },\n        'managed-services': {\n            'title': 'Managed IT Services',\n            'description': 'Comprehensive managed IT services to maintain and optimize your technology infrastructure.',\n            'features': [\n                '24/7 Monitoring & Support',\n                'Proactive Maintenance',\n                'Help Desk Services',\n                'Network Management',\n                'Backup & Recovery',\n                'Performance Optimization'\n            ]\n        }\n    }\n    \n    service = services_data.get(service_name)\n    if not service:\n        flash('Service not found.', 'error')\n        return redirect(url_for('services'))\n    \n    return render_template('service_detail.html', service=service, service_name=service_name)\n\n@app.route('/about')\ndef about():\n    return render_template('about.html')\n\n@app.route('/blog')\ndef blog():\n    # Sample blog posts - in a real application, these would come from a database\n    blog_posts = [\n        {\n            'title': 'The Future of IT Consulting: Trends to Watch in 2025',\n            'excerpt': 'Explore the emerging trends shaping the IT consulting landscape and how businesses can prepare for the future.',\n            'date': '2025-01-15',\n            'image': 'https://pixabay.com/get/g42c1431de6f9df6c99ab8d329671d5de8aaaf3cfb5aa921d6039e8b1f070a8f283b03fc12c2d27e2cd8c680db2ecaf52a40e918bb9abbd79dbdb636647861fd3_1280.jpg',\n            'slug': 'future-of-it-consulting-2025'\n        },\n        {\n            'title': 'Cloud Migration Best Practices for Enterprise Success',\n            'excerpt': 'Learn the essential strategies and best practices for successful cloud migration in enterprise environments.',\n            'date': '2025-01-10',\n            'image': 'https://pixabay.com/get/ge08eb7dc35abd8c2af836a8126d5cc623838bce39046ba73ad0c009d47c6e78c56bde5c0e649aac07d47af6041ae9b0c63f93eafac84a8d136a55f73761d01f7_1280.jpg',\n            'slug': 'cloud-migration-best-practices'\n        },\n        {\n            'title': 'Cybersecurity in the Age of Remote Work',\n            'excerpt': 'Discover how to maintain robust cybersecurity measures while supporting a distributed workforce.',\n            'date': '2025-01-05',\n            'image': 'https://pixabay.com/get/g4e9f67c611c2217cd46e806ae44753b1ed32a806c3f98de9ba8a9fa1e2b9314bcc6cc9fdd3c8e1d6b690c3e802b659f545c265b985ec72e54568088bb9be2cdf_1280.jpg',\n            'slug': 'cybersecurity-remote-work'\n        }\n    ]\n    return render_template('blog.html', posts=blog_posts)\n\n@app.route('/contact', methods=['GET', 'POST'])\ndef contact():\n    form = ContactForm()\n    if form.validate_on_submit():\n        try:\n            # Send email\n            msg = Message(\n                subject=f'New Contact Form Submission from {form.name.data}',\n                recipients=[os.environ.get('CONTACT_EMAIL', 'puppalasupraja25@gmail.com')],\n                body=f\"\"\"\n                New contact form submission:\n                \n                Name: {form.name.data}\n                Email: {form.email.data}\n                Company: {form.company.data}\n                Phone: {form.phone.data}\n                Service Interest: {form.service.data}\n                \n                Message:\n                {form.message.data}\n                \"\"\"\n            )\n            mail.send(msg)\n            flash('Thank you for your message! We will get back to you soon.', 'success')\n            return redirect(url_for('contact'))\n        except Exception as e:\n            logging.error(f\"Error sending email: {e}\")\n            flash('There was an error sending your message. Please try again later.', 'error')\n    \n    return render_template('contact.html', form=form)\n\n@app.route('/newsletter', methods=['POST'])\ndef newsletter():\n    form = NewsletterForm()\n    if form.validate_on_submit():\n        try:\n            # In a real application, you would save this to a database\n            flash('Thank you for subscribing to our newsletter!', 'success')\n        except Exception as e:\n            logging.error(f\"Error subscribing to newsletter: {e}\")\n            flash('There was an error subscribing. Please try again later.', 'error')\n    \n    return redirect(request.referrer or url_for('index'))\n\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('404.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    return render_template('500.html'), 500\n","size_bytes":7358}},"version":1}